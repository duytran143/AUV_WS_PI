import os
import math
import serial
import socket
import glob

# üîπ T·ª± ƒë·ªông t√¨m c·ªïng STM32 USB
def find_stm32_port():
    ports = glob.glob('/dev/serial/by-id/usb-STMicroelectronics*')
    return ports[0] if ports else None

USB_PORT = find_stm32_port()
BAUD_RATE = 115200

if USB_PORT:
    try:
        ser = serial.Serial(USB_PORT, BAUD_RATE, timeout=1)
        print(f"‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi {USB_PORT} ·ªü baud rate {BAUD_RATE}")
    except serial.SerialException:
        print(f"‚ùå Kh√¥ng th·ªÉ m·ªü {USB_PORT}. Ki·ªÉm tra k·∫øt n·ªëi USB!")
        exit(1)
else:
    print("‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã STM32! Ki·ªÉm tra k·∫øt n·ªëi USB.")
    exit(1)

# üîπ C·∫•u h√¨nh server nh·∫≠n d·ªØ li·ªáu t·ª´ Windows
HOST = "0.0.0.0"
PORT = 5000

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((HOST, PORT))
server_socket.listen(1)

print(f"üîπ ƒêang l·∫Øng nghe tr√™n c·ªïng {PORT}...")
conn, addr = server_socket.accept()
print(f"‚úÖ K·∫øt n·ªëi t·ª´ {addr}")

# H√†m t√≠nh PWM v·ªõi tham s·ªë h∆∞·ªõng, h·ªá s·ªë l√†m ch·∫≠m, v√† t√πy ch·ªânh ng∆∞·ª°ng min/max
def calculate_pwm(dir, speed_scale, slowdown_factor, min_pwm, max_pwm):
    PWM_CENTER = 1500
    PWM_RANGE = 500
    pwm_value = int(PWM_CENTER + (-1 if dir else 1) * PWM_RANGE * speed_scale)

    # R√†ng bu·ªôc gi√° tr·ªã PWM trong kho·∫£ng t·ª´ min_pwm ƒë·∫øn max_pwm
    pwm_value = max(min_pwm, min(max_pwm, pwm_value))

    # Th√™m y·∫øu t·ªë l√†m ch·∫≠m v√†o gi√° tr·ªã PWM
    return pwm_value

# H√†m ƒëi·ªÅu ch·ªânh PWM t·ª´ t·ª´ ƒë·∫øn gi√° tr·ªã m·ª•c ti√™u
def adjust_pwm_to_target(current_pwm, target_pwm, slowdown_factor):
    if current_pwm < target_pwm:
        return current_pwm + slowdown_factor
    elif current_pwm > target_pwm:
        return current_pwm - slowdown_factor
    return current_pwm

# H√†m ƒë·ªÉ thi·∫øt l·∫≠p min/max PWM cho ƒë·ªông c∆°
def set_pwm_limits(target_pwm, min_pwm, max_pwm):
    return max(min_pwm, min(max_pwm, target_pwm))

# Gi√° tr·ªã min v√† max PWM c√≥ th·ªÉ t√πy ch·ªânh
min_pwm = 1100
max_pwm = 1900
min_pwm_Vfast = 1600
max_pwm_Vfast = 2000
min_pwm_Vslow = 1550
max_pwm_Vslow = 1900

# Gi√° tr·ªã min v√† max PWM cho ƒëi·ªÅu khi·ªÉn yaw
min_pwm_yaw = 1200
max_pwm_yaw = 1800

# T√πy ch·ªânh s·ª± ch√™nh l·ªách gi·ªØa 2 ƒë·ªông c∆° d·ªçc
motor_diff = -100  # M·ª©c ƒë·ªô ch√™nh l·ªách PWM gi·ªØa ƒë·ªông c∆° 5,6 v√† 7,8
motor_diff_yaw = 100

# H·ªá s·ªë l√†m ch·∫≠m cho ƒë·ªông c∆° ngang, d·ªçc v√† yaw
slowdown_factor = 50  # H·ªá s·ªë l√†m ch·∫≠m cho c√°c ƒë·ªông c∆° ngang
slowdown_factor_vertical = 20  # H·ªá s·ªë l√†m ch·∫≠m ri√™ng cho ƒë·ªông c∆° d·ªçc
yaw_slowdown_factor = 20  # H·ªá s·ªë l√†m ch·∫≠m ri√™ng cho yaw

# Bi·∫øn ki·ªÉm tra tr·∫°ng th√°i n√∫t nh·∫•n 4 v√† 5 (yaw control)
button_4_pressed = False
button_5_pressed = False

# Bi·∫øn l∆∞u tr·ªØ tr·∫°ng th√°i PWM hi·ªán t·∫°i c·ªßa c√°c ƒë·ªông c∆°
current_pwm_motor_1 = 1500
current_pwm_motor_2 = 1500
current_pwm_motor_3 = 1500
current_pwm_motor_4 = 1500
current_pwm_motor_5 = 1530
current_pwm_motor_6 = 1540
current_pwm_motor_7 = 1550
current_pwm_motor_8 = 1550

# Nh·∫≠n d·ªØ li·ªáu t·ª´ m√°y t√≠nh Windows v√† x·ª≠ l√Ω
while True:
    data = conn.recv(1024).decode().strip()
    if not data:
        continue

    # T√°ch d·ªØ li·ªáu t·ª´ joystick v√† n√∫t nh·∫•n yaw
    try:
        left_x, left_y, right_x, right_y, left_z, right_z, hat_x, hat_y, buttons = data.split()
        left_x, left_y, right_x, right_y, left_z, right_z = map(float, [left_x, left_y, right_x, right_y, left_z, right_z])
        hat_x, hat_y = map(int, [hat_x, hat_y])
        button_4_pressed = int(buttons[4])  # N√∫t 4 (b·∫Øt ƒë·∫ßu t·ª´ 0)
        button_5_pressed = int(buttons[5])  # N√∫t 5 (b·∫Øt ƒë·∫ßu t·ª´ 0)
    except ValueError:
        continue

    # T√≠nh to√°n PWM cho 4 ƒë·ªông c∆° ngang theo tr·ª•c X c·ªßa joystick tr√°i
    if left_x < 0:  # Khi x > 0
        # target_pwm_1 = calculate_pwm(0, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 1
        target_pwm_2 = calculate_pwm(0, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 2
        # target_pwm_3 = calculate_pwm(1, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 3
        target_pwm_4 = calculate_pwm(1, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 4
    elif left_x > 0:  # Khi x < 0
        # target_pwm_1 = calculate_pwm(1, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 1
        target_pwm_2 = calculate_pwm(1, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 2
        # target_pwm_3 = calculate_pwm(0, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 3
        target_pwm_4 = calculate_pwm(0, abs(left_x), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 4
    elif left_y < 0:  # Khi y > 0
        target_pwm_1 = calculate_pwm(1, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 1
        # target_pwm_2 = calculate_pwm(1, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 2
        # target_pwm_3 = calculate_pwm(1, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 3
        target_pwm_4 = calculate_pwm(1, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 4
    elif left_y > 0:  # Khi y < 0
        # target_pwm_1 = calculate_pwm(0, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 1
        target_pwm_2 = calculate_pwm(0, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 2
        target_pwm_3 = calculate_pwm(0, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 3
        # target_pwm_4 = calculate_pwm(0, abs(left_y), slowdown_factor, min_pwm, max_pwm)  # ƒê·ªông c∆° 4
    else:  # Khi joystick tr√°i ·ªü v·ªã tr√≠ trung t√¢m
        target_pwm_1 = 1500
        target_pwm_2 = 1500
        target_pwm_3 = 1500
        target_pwm_4 = 1500

    # T√≠nh to√°n PWM cho 4 ƒë·ªông c∆° d·ªçc theo tr·ª•c Y c·ªßa joystick ph·∫£i
    if right_y < 0:  # Khi y > 0
        target_pwm_5 = calculate_pwm(1, abs(right_y), slowdown_factor_vertical, min_pwm_Vslow, max_pwm_Vslow)  # ƒê·ªông c∆° 5
        target_pwm_6 = calculate_pwm(1, abs(right_y), slowdown_factor_vertical, min_pwm_Vslow, max_pwm_Vslow)  # ƒê·ªông c∆° 6
        target_pwm_7 = calculate_pwm(1, abs(right_y), slowdown_factor_vertical, min_pwm_Vfast, max_pwm_Vfast)  # ƒê·ªông c∆° 7
        target_pwm_8 = calculate_pwm(1, abs(right_y), slowdown_factor_vertical, min_pwm_Vfast, max_pwm_Vfast)  # ƒê·ªông c∆° 8
    elif right_y > 0:  # Khi y < 0
        target_pwm_5 = calculate_pwm(0, abs(right_y), slowdown_factor_vertical, min_pwm_Vslow, max_pwm_Vslow)  # ƒê·ªông c∆° 5
        target_pwm_6 = calculate_pwm(0, abs(right_y), slowdown_factor_vertical, min_pwm_Vslow, max_pwm_Vslow)  # ƒê·ªông c∆° 6
        target_pwm_7 = calculate_pwm(0, abs(right_y), slowdown_factor_vertical, min_pwm_Vfast, max_pwm_Vfast)  # ƒê·ªông c∆° 7
        target_pwm_8 = calculate_pwm(0, abs(right_y), slowdown_factor_vertical, min_pwm_Vfast, max_pwm_Vfast)  # ƒê·ªông c∆° 8
    else:
        # N·∫øu joystick ph·∫£i kh√¥ng thay ƒë·ªïi, gi·ªØ nguy√™n gi√° tr·ªã PWM
        target_pwm_5 = current_pwm_motor_5
        target_pwm_6 = current_pwm_motor_6
        target_pwm_7 = current_pwm_motor_7
        target_pwm_8 = current_pwm_motor_8

    # ƒêi·ªÅu khi·ªÉn yaw khi n√∫t nh·∫•n 4 v√† 5 ƒë∆∞·ª£c nh·∫•n
    if button_4_pressed:  # Khi n√∫t 4 ƒë∆∞·ª£c nh·∫•n
        target_pwm_1 = set_pwm_limits(target_pwm_1 + motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)
        target_pwm_2 = set_pwm_limits(target_pwm_2 - motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)
        target_pwm_3 = set_pwm_limits(target_pwm_3 + motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)
        target_pwm_4 = set_pwm_limits(target_pwm_4 - motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)
    if button_5_pressed:  # Khi n√∫t 5 ƒë∆∞·ª£c nh·∫•n
        target_pwm_1 = set_pwm_limits(target_pwm_1 - motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)
        target_pwm_2 = set_pwm_limits(target_pwm_2 + motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)
        target_pwm_3 = set_pwm_limits(target_pwm_3 - motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)
        target_pwm_4 = set_pwm_limits(target_pwm_4 + motor_diff_yaw, min_pwm_yaw, max_pwm_yaw)

    # ƒêi·ªÅu ch·ªânh PWM t·ª´ t·ª´ ƒë·∫øn gi√° tr·ªã m·ª•c ti√™u
    current_pwm_motor_1 = adjust_pwm_to_target(current_pwm_motor_1, target_pwm_1, slowdown_factor)
    current_pwm_motor_2 = adjust_pwm_to_target(current_pwm_motor_2, target_pwm_2, slowdown_factor)
    current_pwm_motor_3 = adjust_pwm_to_target(current_pwm_motor_3, target_pwm_3, slowdown_factor)
    current_pwm_motor_4 = adjust_pwm_to_target(current_pwm_motor_4, target_pwm_4, slowdown_factor)

    current_pwm_motor_5 = adjust_pwm_to_target(current_pwm_motor_5, target_pwm_5, slowdown_factor_vertical)
    current_pwm_motor_6 = adjust_pwm_to_target(current_pwm_motor_6, target_pwm_6, slowdown_factor_vertical)
    current_pwm_motor_7 = adjust_pwm_to_target(current_pwm_motor_7, target_pwm_7, slowdown_factor_vertical)
    current_pwm_motor_8 = adjust_pwm_to_target(current_pwm_motor_8, target_pwm_8, slowdown_factor_vertical)

    # G·ª≠i d·ªØ li·ªáu PWM ƒë·∫øn STM32 qua USB CDC
    pwm_data = f"{current_pwm_motor_1}{current_pwm_motor_2}{current_pwm_motor_3}{current_pwm_motor_4}{current_pwm_motor_5}{current_pwm_motor_6}{current_pwm_motor_7}{current_pwm_motor_8}\n"
    ser.write(pwm_data.encode())

    # üü¢ Debug: In ra gi√° tr·ªã PWM ƒë√£ g·ª≠i
    print(f"‚úÖ ƒê√£ g·ª≠i ƒë·∫øn STM32: {pwm_data.strip()}")

# üîπ ƒê√≥ng k·∫øt n·ªëi khi k·∫øt th√∫c
conn.close()
server_socket.close()